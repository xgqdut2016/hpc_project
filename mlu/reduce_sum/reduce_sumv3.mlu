#include <bang.h>
#include <bang_device_functions.h>
#define EPS 1e-7
#define NRAM_MAX_SIZE 102400
const int maxNum = NRAM_MAX_SIZE/sizeof(float); //NRAM上最多存储maxNum个float元素
const int warpSize = 32;//__bang_reduce_sum每次从src取128字节数据相加，对应32个float元素,并且0-31的结果保存在索引0，32-63的结果保存在索引1

__nram__ float src1[warpSize];//每次搬运maxNum数据到NRAM
__nram__ float dest[warpSize];
__nram__ float destFinal[warpSize];

__mlu_entry__ void unionKernel(float* middle, float* source1, int num) {
  
  int remain = num%taskDim;//如果不能整除，则让前部分taskId多处理一个元素
  int stepEasy = (num - remain)/taskDim;
  int stepHard = stepEasy + 1;
  int step = (taskId < remain ? stepHard : stepEasy);//前部分tsakId多处理一个元素
  int indStart = (taskId < remain ? taskId * stepHard : remain * stepHard + (taskId - remain) * stepEasy);
  
  source1 = source1 + indStart;//设定起始偏移量
  
  int repeat = step/warpSize;//针对taskId处理的这部分数据切分，每一份数据长度切分为128字节，即32个float
  int remainWarp = step%warpSize;//针对这部分数据先内部做add，把结果集中在32个float上
  __bang_write_zero(destFinal, warpSize);//初始化destFinal全部元素为0
  __bang_write_zero(dest, warpSize);//初始化dest全部元素为0
  for(int i = 0; i < repeat; i++){
    //__bang_printf("xiao:%d\n",i);
    __memcpy(src1, source1, warpSize * sizeof(float), GDRAM2NRAM);//每次迁移32个float数据到NRAM
    __bang_add(dest, dest, src1, warpSize);//dest存储add结果
   
    
    source1 = source1 + warpSize;
    
  }
  if(remainWarp){//如果step无法整除warpSize，多余数据特殊处理
    
    
    __bang_write_zero(src1, warpSize);//初始化src1全部元素为0
    
    __memcpy(src1, source1, remainWarp * sizeof(float), GDRAM2NRAM);
    __bang_add(dest, dest, src1, warpSize);
    
  }
  //上面运算结束以后，dest这个长度为32的向量就保存了taskId处理的这部分step数据的add结果
  __bang_reduce_sum(destFinal, dest, warpSize);//针对dest规约即可把结果保存到destFinal[0]
  __bang_printf("taskId:%d,sum:%.2f\n",taskId, destFinal[0]);
  __memcpy(middle + taskId, destFinal, sizeof(float), NRAM2GDRAM);
}

__mlu_entry__ void blockKernel(float* dst, float* middle, int taskNum) {
  //int repeat = count/warpSize;//count 至少等于上一个taskNum, count%warpSize=0
  int remain = taskNum%warpSize;
  int repeat = (taskNum - remain)/warpSize;
  __nram__ float srcMid[warpSize];
  __bang_write_zero(destFinal, warpSize);//初始化destFinal全部元素为0
  //__bang_printf("sum:%.6f\n",destFinal[0]);
  for(int i = 0; i < repeat; i++){
    __memcpy(srcMid, middle + i * warpSize, warpSize * sizeof(float), GDRAM2NRAM);//每次迁移32个float数据到NRAM
    __bang_add(destFinal, destFinal, srcMid, warpSize);//destFinal存储add结果
  }
  if(remain){
    __bang_write_zero(srcMid, warpSize);//初始化destFinal全部元素为0
    __memcpy(srcMid, middle + repeat * warpSize, remain * sizeof(float), GDRAM2NRAM);
    __bang_add(destFinal, destFinal, srcMid, warpSize);//destFinal存储add结果
  }
  __bang_reduce_sum(destFinal, destFinal, warpSize);//针对destFinal规约即可把结果保存到destFinal[0]
  __bang_printf("taskId:%d,sum:%.6f\n",taskId, destFinal[0]);
  __memcpy(dst, destFinal, sizeof(float), NRAM2GDRAM);//这个kernel只能使用Block类型，1个任务
}

int main(void)
{
  //int num = 1020010;
  int num = 102;
  cnrtQueue_t queue;
  CNRT_CHECK(cnrtSetDevice(0));
  CNRT_CHECK(cnrtQueueCreate(&queue));

  cnrtDim3_t dim = {4, 1, 1};
  int taskNum = dim.x * dim.y * dim.z;
  cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_UNION1;

  cnrtNotifier_t start, end;
  CNRT_CHECK(cnrtNotifierCreate(&start));
  CNRT_CHECK(cnrtNotifierCreate(&end));

  float* host_dst = (float*)malloc(sizeof(float));
  float* host_src1 = (float*)malloc(num * sizeof(float));
  

  for (int i = 0; i < num; i++) {
    host_src1[i] = 1e-1;
    
  }

  float* mlu_middle;
  float* mlu_dst;
  float* mlu_src1;
  
  CNRT_CHECK(cnrtMalloc((void**)&mlu_middle, taskNum * sizeof(float)));
  CNRT_CHECK(cnrtMalloc((void**)&mlu_dst, sizeof(float)));
  CNRT_CHECK(cnrtMalloc((void**)&mlu_src1, num * sizeof(float)));
 

  CNRT_CHECK(cnrtMemcpy(mlu_src1, host_src1, num * sizeof(float), cnrtMemcpyHostToDev));
  

  CNRT_CHECK(cnrtPlaceNotifier(start, queue));
  unionKernel<<<dim, ktype, queue>>>(mlu_middle, mlu_src1, num);
  CNRT_CHECK(cnrtPlaceNotifier(end, queue));
  cnrtQueueSync(queue);
  //---------------------------
  cnrtDim3_t dimBlock = {1, 1, 1};
  CNRT_CHECK(cnrtPlaceNotifier(start, queue));
  blockKernel<<<dimBlock, CNRT_FUNC_TYPE_BLOCK, queue>>>(mlu_dst, mlu_middle, taskNum);
  CNRT_CHECK(cnrtPlaceNotifier(end, queue));
  cnrtQueueSync(queue);
  //----------------------------

  CNRT_CHECK(cnrtMemcpy(host_dst, mlu_dst, sizeof(float), cnrtMemcpyDevToHost));
  float sum_s = host_dst[0];
  
  if (fabsf(sum_s - float(num * 1e-1)) > EPS) {
    printf("%f expected, but %f got!\n", float(num * 1e-1), sum_s);
  }

  float timeTotal;
  CNRT_CHECK(cnrtNotifierDuration(start, end, &timeTotal));
  printf("Total Time: %.3f ms\n", timeTotal / 1000.0);

  CNRT_CHECK(cnrtQueueDestroy(queue));

  cnrtFree(mlu_middle);
  cnrtFree(mlu_src1);
  
  free(host_dst);
  free(host_src1);
  

  return 0;
}




